{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Claudia:DS:131:Vectors and Matrices",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/claudiasofiaC/DS-Unit-1-Sprint-3-Linear-Algebra/blob/master/Claudia_DS_131_assignment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yXA3GwWhY9KL",
        "colab_type": "text"
      },
      "source": [
        "# Part 1 - Scalars and Vectors\n",
        "\n",
        "For the questions below it is not sufficient to simply provide answer to the questions, but you must solve the problems and show your work using python (the NumPy library will help a lot!) Translate the vectors and matrices into their appropriate python  representations and use numpy or functions that you write yourself to demonstrate the result or property. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oNOTv43_Zi9L",
        "colab_type": "text"
      },
      "source": [
        "## 1.1 Create a two-dimensional vector and plot it on a graph"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XNqjzQzrkVG7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "from IPython.display import display"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WgkL8QM5M7iq",
        "colab_type": "code",
        "outputId": "c3e05605-1125-47b3-f7aa-47daeec2bf90",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        }
      },
      "source": [
        "#2 dimensional vector and plot\n",
        "\n",
        "\n",
        "fig,ax = plt.subplots(1)\n",
        "\n",
        "xx = 4 # X Vector\n",
        "yy = 2 # Y Vector \n",
        "plt.arrow(0, 0, xx, yy, head_width=.1, head_length=0.1, color = 'pink')\n",
        "\n",
        "plt.xlim(-1,5) # Set plot X dimensions\n",
        "plt.ylim(-1,5) # Set plot Y dimensions\n",
        "\n",
        "ax.set_ylabel('y-axis')\n",
        "ax.set_xlabel('x-axis')\n",
        "ax.set_yticklabels([])\n",
        "ax.set_xticklabels([])\n",
        "\n",
        "plt.show()\n",
        "\n"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAEACAYAAABMEua6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADw5JREFUeJzt3VtsXelZh/H/69iOYztx4kOcg2PH\nmUkmqajUgwfuKtELUBmQENfQCgFmLqBVmZZeQGFARRUSQmJaJCbqICQ6FQUuKgSiVVFp56IVGqdU\n1dDMJBMnzsFOxjnZcXy2Xy6+vWfZ02S87fFey/vdz08a2fn2dta3MsmjpbXX+pa5uwAAMTQUPQEA\nwPYh6gAQCFEHgECIOgAEQtQBIBCiDgCBEHUACISoA0AgRB0AAmnMYyNmNixpWJLa2to+fPr06Tw2\nCwBhnDt37ra792z0Pst7mYChoSEfGRnJdZsAUOvM7Jy7D230Pk6/AEAgRB0AAiHqABAIUQeAQIg6\nAARC1AEgEKIOAIEQdQAIhKgDQCBEHQACIeoAEAhRB4BAiDoABELUASAQog4AgRB1AAiEqANAIEQd\nAAIh6gAQCFEHgECIOgAEQtQBIBCiDgCBEHUACISoA0AgRB0AAiHqABAIUQeAQIg6AARC1AEgEKIO\nAIEQdQAIhKgDQCBEHQACIeoAEEguUTezYTMbMbORycnJPDYJAHUpl6i7+1l3H3L3oZ6enjw2CQB1\nidMvABAIUQeAQIg6AARC1AEgEKIOAIEQdQAIhKgDQCBEHQACIeoAEAhRB4BAiDoABELUASAQog4A\ngRB1AAiEqANAIEQdAAIh6gAQCFEHgECIOgAEQtQBIBCiDgCBEHUACISoA0AgRB0AAiHqABAIUQeA\nQIg6AARC1AEgEKIOAIEQdQAIhKgDQCBEHQACIeoAEAhRB4BAcom6mQ2b2YiZjUxOTuaxSQCoS7lE\n3d3PuvuQuw/19PTksUkAqEucfgGAQIg6AARC1AEgEKIOAIEQdQAIhKgDQCBEHQACIeoAEAhRB4BA\niDoABELUASAQog4AgRB1AAiEqANAIEQdAAIh6gAQCFEHgECIOgAEQtQBIBCiDgCBEHUACGRTUTez\nBjPbV63JAADemw2jbmZfM7N9ZtYm6TVJPzGzz1Z/agCAzarkSP197j4t6Vcl/aekQUm/UdVZAQC2\npJKoN5lZk1LU/83dlyR5dacFANiKSqL+oqQrktokvWJmA5KmqzkpAMDWNG70Bnd/QdILa4bGzOzn\nqzclAMBWPTbqZvbr7v5VM/uDx7zlr6s0JwDAFr3bkXpb6evePCYCAHjvHht1d3+x9PXP3vmamTVX\nc1IAgK2p5Dr175rZ8TW/flrSq1WcEwBgizb8oFTSFyV908xekHRU0sck/WZVZwUAlXKXVlcf/VpD\ng2SW73wKVsnVL98ys2clfVvSbUkfdPebVZ8ZAFTi7pT02pvS2naX76Q5NSAd7iliVoWp5PTL5yV9\nSdJHJD0v6btm9kyV5wUAleloT199zX8NJnXslQ52FjixYlRy+qVL0s+6+5ykH5jZNyV9RdJ/VLoR\nMxuWNCxJ/f39W5knAGRWV6WrN6Wx8Z9+raEhxfzUQN2depEkc8/3jv+hoSEfGRnJdZsAAlhZka6M\nS9dvZWMNDdKZQalrv/TWXen1y9LgUenYoXBBN7Nz7j600fs2PFI3sx5Jn5P0Pkkt5XF3/+h7miEA\nbGR5WRq9Lk3czsaaGqXTg1Jnx/r39nZJ3QekXfX9mIhKTr+8LOnrkp6R9KykT0iarOakANSxxSXp\n0rV05F3WsjuFvHz+/HHqPOhShefU3f0lM/uUu39P0vfMjOvUAWyfhUXpwli6kqWsfY/01KDU3lrc\nvGpQJVFfKn2dKF31Mi6p/j5SBrC95ualN65IUzPZWEe7dOq41NryuJ/CBiqJ+hfMrEPSc0qXNu6T\n9OmqzgpATDOzKeQzs9lYZ4d0ckBqYfWR7VDJzUf/Xvp2ShJL7gLYnOkZ6fxlaX4hG+vplJ48JjU3\nFTevoCo5Un+bmf3Q3T9UrckACOLetPT6qLS4nI0d7pZO9EmNm8oONmmzf7qxLvwEsD3cpTv30xH5\n2nVY+nql40ekXbuKm1udqeQ69d+X9I/ufl+buIsUQHDu2Q0/aw0ckfoPpRuDkLtKjtR7JY2Y2Q8l\n/b2Zmed9GyqAncFdmpiULl5dP/5En3S0N9xdnLWokg9K/7i0qNcvKC25+2Uz+2dJL7n7pWpPEEDB\n3KVrN6XLN9aPnxqQDnUT8h2monPq7u5mdlPSTUnLkg5I+lcz+7a7/2E1JwigAKur0tiEdHVi/fiZ\nE1LPAUK+g1VyTv1Tkj6utJb6VyR91t2XzKxB0kVJRB2IYGUlHY3feCsb29WQQt61v7h5YVMqOVLv\nlPRr7j62dtDdV83sl6szLQC5WFqWRq9JN+9kY81NKeT7eeZ8LarknPqfvstr57d3OgCqbnEpfdB5\n+1421tqSFsza21bcvLAtuAsAqAfzC2nBrHvT2dje1rRgVtue4uaFbUfUgahm59I6K9MPs7H9e9OC\nWXt2FzUrVBlRByJ58DDdDDQ7n41175ee7Jd2s2BWPSDqQK2bepBuz19YzMZ6u6QnjqWnBKGu8H8c\nqEV3p6Tzo9LySjZ25GB6Pmcj66zUM6IO1AL3dLXK+VFp7SIdxw6ltVZ4jBtKiDqwU7mn68cvXFk/\nPng0rX7Igll4BKIO7CTu6Y7OS9fWjz/ZLx3p4fZ8bIioA0VbXU0LZl0ZXz/+1PH0gSchxyYQdaAI\nK6vS2HiKeVmDSadPpEsQCTm2iKgDeVlekS5fl8Yns7GmxnR7fmdHcfNCKEQdqKalJenNa+kJQWUt\nzSnkHSyYhe1H1IHttrAoXRyT7kxlY217UsjbW4ubF+oCUQe2w9y89MZYuruzbF97+rCztaWwaaH+\nEHVgqx7OpXVWZmazsc590skBqYUFs1AMog5sxvRMCvncQjbWcyBdR97cVNy8gBKiDmzk3nQK+eJS\nNnaoWzrRx4JZ2HH4Gwm8k3v6kPP10XQ9ednR0oJZu1gwCzsXUQekFPK37qYj8rUGDkv9h1lnBTUj\nl6ib2bCkYUnq7+/PY5PAxtylidvp8sO1TvSlBbO4qxM1KJeou/tZSWclaWhoyDd4O1A97tL1W9Lo\n9fXjJwekw92EHDWP0y+Ib3VVGpuQrk6sHz89KB3sJOQIhagjppUV6fKNtIxt2a6GtGBWVwchR1hE\nHXEsLafTKjdvZ2PNTemI/MC+4uYF5Iioo7YtLklvXpUm72Vje1qk08fTbfpAnSHqqD3zC9KFsXRT\nUFl7azoib9tT3LyAHYCoozbMzktvXJamH2Zj+/dKpwbSkTkASUQdO9nMbLoZ6OFcNtbVkS4/3N1c\n3LyAHYyoY2eZepBCPr+YjR3slJ48JjWxYBawEaKO4t2dks6Ppse9lR3pkQb7pEbWWQE2g6gjf+7S\n7fsp5L7mBuNjh9JaKyyYBWwZUUc+3KVbd6Q3rqwfP34kxZwFs4BtQdRRPe7S+GS6jnytJ46lZWy5\nqxPYdkQd22t1Vbp2S7pyY/34U8el3i5CDlQZUcd7t7IqjY1L125mY2bSmUGp+wAhB3JE1LE1yyvS\n5evp9EpZ4y7pzAmps6O4eQF1jqijckvL0qVr6QPPst3N6Yi8Y29x8wLwNqKOd7ewKF28Kt25n421\ntqR1Vva2FTcvAI9E1PHT5hakC1ek+w+ysX1t6cPOVhbMAnYyoo7k4VxaMOvBbDZ2YF9aMKtld3Hz\nArApRL2ePXiY1lmZnc/Gug9IJ/vTwyUA1ByiXm/uP0i35y8uZWOHuqUTfVITfx2AWse/4ujcswWz\nVlaz8aMHpcGjrLMCBEPUI3JPj3c7P7p+vP9wWjCLdVaAsIh6FO7pgcsXxtaPDx6V+noJOVAniHot\nc5eu35JGr68fP9kvHe7h9nygDhH1WrO6Kl2dkMYm1o+fHkxPCCLkQF0j6rVgZUW6Mp6OyssaGtLt\n+V37CTmAtxH1nWp5OZ1WmbidjTU3SqdPpJuCAOARiPpOsriUHigxeS8b27M7nVrZ117cvADUDKJe\ntPlF6eJYupa8rL01rbPS3lrYtADUJqJehNn59KzO6ZlsrKM9hXxPS1GzAhAAUc/LzGxaZ+XhXDbW\n2ZEWzNrdXNy8AIRC1KtpaiaFfH4hGzvYmR68zIJZAKqAqG+3e9Pp9vyl5WzscI904qjUyB83gOqi\nMtvpzpT02sX0fV+vdPwIC2YByFUuUTezYUnDktTf35/HJovR1SF95MPcDASgMLms8uTuZ919yN2H\nenp68thkcQg6gAKxdB8ABELUASAQog4AgRB1AAiEqANAIEQdAAIh6gAQCFEHgECIOgAEQtQBIBCi\nDgCBEHUACISoA0AgRB0AAiHqABAIUQeAQIg6AARC1AEgEKIOAIEQdQAIhKgDQCBEHQACIeoAEAhR\nB4BAiDoABELUASAQog4AgRB1AAiEqANAIEQdAAIh6gAQCFEHgECIOgAEQtQBIJDGPDZiZsOShku/\nXDCz1/LYbkG6Jd0uehJVxP7Vrsj7JsXfv6cqeZO5e7Unsn6DZiPuPpTrRnPE/tW2yPsXed8k9q+M\n0y8AEAhRB4BAioj62QK2mSf2r7ZF3r/I+yaxf5IKOKcOAKgeTr8AQCBEHQACIeoAEAhRB4BAiDoA\nBELUgQqY2bNm9vGi5wFshEsaASAQjtQRjpk9bWY/NrMWM2szs/8zs595x3t+xcz+x8z+18z+y8x6\nS+N/Y2Z/Uvr+F83sFTNrMLPnzewzpfFPmtlPStv4p/z3EHg8jtQRkpl9QVKLpD2Srrv7F9/x+gFJ\n993dzey3JZ1x9+fMrFXSq5J+T9LfSfold79kZs9LmnH3vzKzcUmD7r5gZvvd/X6e+wa8m1yW3gUK\n8OdKcZ6X9MlHvN4n6etmdlhSs6TLkuTus2b2O5JekfRpd7/0iJ/9saSXzewbkr5RjckDW8XpF0TV\nJald0l5JLWb2F2b2IzP7Uen1L0n6sru/X9LvKh3Vl71f0h1JRx7zez8j6W8lfUjSq2bGwRF2DKKO\nqF6U9HlJL0v6S3f/I3f/gLt/oPR6h6Qbpe8/Uf4hMxuQ9JykD0r6mJn93Nrf1MwaJB1z9/+W9LnS\n79Ne1T0BNoEjDIRTuvRwyd2/Zma7JH3fzD7q7t9Z87bnJf2Lmd2T9B1Jg2Zmkl6S9Bl3Hzez35L0\nD2b29Jqf2yXpq2bWIckkvcA5dewkfFAKAIFw+gUAAiHqABAIUQeAQIg6AARC1AEgEKIOAIEQdQAI\nhKgDQCD/D2XtYzJIEh0jAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "unKFT619lk3e",
        "colab_type": "text"
      },
      "source": [
        "## 1.2 Create a three-dimensional vector and plot it on a graph"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "atUEd3T6llKm",
        "colab_type": "code",
        "outputId": "4282c2da-1113-4e4d-bd65-2a32a3673a93",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        }
      },
      "source": [
        "\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "y = [.7, .3]\n",
        "z = 4.2\n",
        "\n",
        "ax.quiver(0, 0, 0, x, y, z, length=.5, color='lime')\n",
        "ax.set_xlim(-2, 5)\n",
        "ax.set_ylim(-2, 5)\n",
        "ax.set_zlim(-2, 5)\n",
        "ax.set_xlabel('x-axis')\n",
        "ax.set_ylabel('y-axis')\n",
        "ax.set_zlabel('z-axis')\n",
        "\n",
        "plt.tight_layout\n",
        "\n",
        "view = plt.show()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nSUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b7qFxbKxZmI2",
        "colab_type": "text"
      },
      "source": [
        "## 1.3 Scale the vectors you created in 1.1 by $5$, $\\pi$, and $-e$ and plot all four vectors (original + 3 scaled vectors) on a graph. What do you notice about these vectors? "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ah6zMSLJdJwL",
        "colab_type": "code",
        "outputId": "318887f5-57e2-404d-c506-d4311bf16474",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "from math import e, pi\n",
        "print(e)\n",
        "print(pi)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2.718281828459045\n",
            "3.141592653589793\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3qpwDlzXkVf5",
        "colab_type": "code",
        "outputId": "62f4e8ba-396f-4430-ca77-87974864cd7c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        }
      },
      "source": [
        "#scaled by 5\n",
        "#[.9, .3][5] = [4.5, 1.5]\n",
        "fig,ax = plt.subplots(1)\n",
        "plt.xlim(-1,5) # Set plot X dimensions\n",
        "plt.ylim(-1,5) # Set plot Y dimensions\n",
        "x = np.multiply(2, x)\n",
        "\n",
        "plt.arrow(0, 0, 4.5, 1.5, head_width=.3, head_length=0.2, color = 'lime')\n",
        "plt.title('scale by 5')\n",
        "plt.show()"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wrgqa6sWimbH",
        "colab_type": "text"
      },
      "source": [
        "## 1.4 Graph vectors $\\vec{a}$ and $\\vec{b}$ and plot them on a graph\n",
        "\n",
        "\\begin{align}\n",
        "\\vec{a} = \\begin{bmatrix} 5 \\\\ 7 \\end{bmatrix}\n",
        "\\qquad\n",
        "\\vec{b} = \\begin{bmatrix} 3 \\\\4 \\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pb_czP6HTojl",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "outputId": "b3266beb-e70e-487b-8863-4b48a029dc1e"
      },
      "source": [
        "fig,ax = plt.subplots(1)\n",
        "\n",
        "xa = 5 \n",
        "ya = 7 \n",
        "\n",
        "xb = 3\n",
        "yb = 4\n",
        "\n",
        "plt.arrow(0, 0, xa, ya, head_width=.2, head_length=0.1, color = 'lime')\n",
        "plt.arrow(0, 0, xb, yb, head_width=.2, head_length=0.1, color = 'orange')\n",
        "\n",
        "plt.xlim(-1,8)\n",
        "plt.ylim(-1,8)\n",
        "\n",
        "ax.set_ylabel('y-axis')\n",
        "ax.set_xlabel('x-axis')\n",
        "ax.set_yticklabels([])\n",
        "ax.set_xticklabels([])\n",
        "\n",
        "plt.tight_layout\n",
        "\n",
        "plt.show();"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QN6RU_3gizpw",
        "colab_type": "text"
      },
      "source": [
        "## 1.5 find $\\vec{a} - \\vec{b}$ and plot the result on the same graph as $\\vec{a}$ and $\\vec{b}$. Is there a relationship between vectors $\\vec{a} \\thinspace, \\vec{b} \\thinspace \\text{and} \\thinspace \\vec{a-b}$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L9Sl5_85UDAf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "outputId": "14b7cb24-00fc-4582-d10b-c1db399e4cf3"
      },
      "source": [
        "fig,ax = plt.subplots(1)\n",
        "\n",
        "aVector = np.array([5, 7])\n",
        "bVector = np.array([3, 4])\n",
        "bFromA = aVector-bVector\n",
        "\n",
        "plt.arrow(0, 0, aVector[0], aVector[1], head_width=.2, head_length=0.1, color = 'y')\n",
        "plt.arrow(0, 0, bVector[0], bVector[1], head_width=.2, head_length=0.1, color = 'lime')\n",
        "plt.arrow(0, 0, bFromA[0], bFromA[1], head_width=.2, head_length=0.1, color = 'orange')\n",
        "plt.arrow(aVector[0], aVector[1], -bVector[0], -bVector[1], head_width=.2, head_length=0.1, color = 'pink')\n",
        "\n",
        "plt.xlim(-1,8)\n",
        "plt.ylim(-1,8)\n",
        "\n",
        "ax.set_ylabel('y-axis')\n",
        "ax.set_xlabel('x-axis')\n",
        "ax.set_yticklabels([])\n",
        "ax.set_xticklabels([])\n",
        "\n",
        "plt.tight_layout\n",
        "\n",
        "plt.show();"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JFEGhkZzUyvL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#is the relationship here just the math that has been done and then visualized?"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1ZPVuJAlehu_",
        "colab_type": "text"
      },
      "source": [
        "## 1.6 Find $c \\cdot d$\n",
        "\n",
        "\\begin{align}\n",
        "\\vec{c} = \\begin{bmatrix}7 & 22 & 4 & 16\\end{bmatrix}\n",
        "\\qquad\n",
        "\\vec{d} = \\begin{bmatrix}12 & 6 & 2 & 9\\end{bmatrix}\n",
        "\\end{align}\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2_cZQFCskYNr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "c = np.array([7, 22, 4, 16])\n",
        "d = np.array([12, 6, 2, 9])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rALLXMfDVjeK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "40b292e5-6c76-48b6-8d34-8da472ff0a04"
      },
      "source": [
        "np.dot(c,d)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "368"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cLm8yokpfg9B",
        "colab_type": "text"
      },
      "source": [
        "##  1.7 Find $e \\times f$\n",
        "\n",
        "\\begin{align}\n",
        "\\vec{e} = \\begin{bmatrix} 5 \\\\ 7 \\\\ 2 \\end{bmatrix}\n",
        "\\qquad\n",
        "\\vec{f} = \\begin{bmatrix} 3 \\\\4 \\\\ 6 \\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ku-TdCKAkYs8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "e = np.array([5, 7, 2])\n",
        "f = np.array([3, 4, 6])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aR21pao1VxWg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0d3e10d7-610e-4643-b345-6624e2381177"
      },
      "source": [
        "np.cross([e],[f])\n"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 34, -24,  -1]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-TN8wO2-h53s",
        "colab_type": "text"
      },
      "source": [
        "## 1.8 Find $||g||$ and then find $||h||$. Which is longer?\n",
        "\n",
        "\\begin{align}\n",
        "\\vec{g} = \\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\\\ 8 \\end{bmatrix}\n",
        "\\qquad\n",
        "\\vec{h} = \\begin{bmatrix} 3 \\\\3 \\\\ 3 \\\\ 3 \\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wXs3s6TDV7NJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "g = np.array([[1], [1], [1], [8]])\n",
        "h = np.array([[3], [3], [3], [3]])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RUvfVBI2V7Vi",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8c93df66-7ff2-4093-b16e-6a745f136d64"
      },
      "source": [
        "np.linalg.norm(g)\n"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8.18535277187245"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_bnWaLjoWB6a",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "6b606f23-71ef-46b5-f4f9-f0bf4325de85"
      },
      "source": [
        "np.linalg.norm(h)\n"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "njrWIMS-ZAoH",
        "colab_type": "text"
      },
      "source": [
        "# Part 2 - Matrices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GjkcAVIOmOnn",
        "colab_type": "text"
      },
      "source": [
        "## 2.1 What are the dimensions of the following matrices? Which of the following can be multiplied together? See if you can find all of the different legal combinations.\n",
        "\\begin{align}\n",
        "A = \\begin{bmatrix}\n",
        "1 & 2 \\\\\n",
        "3 & 4 \\\\\n",
        "5 & 6\n",
        "\\end{bmatrix}\n",
        "\\qquad\n",
        "B = \\begin{bmatrix}\n",
        "2 & 4 & 6 \\\\\n",
        "\\end{bmatrix}\n",
        "\\qquad\n",
        "C = \\begin{bmatrix}\n",
        "9 & 6 & 3 \\\\\n",
        "4 & 7 & 11\n",
        "\\end{bmatrix}\n",
        "\\qquad\n",
        "D = \\begin{bmatrix}\n",
        "1 & 0 & 0 \\\\\n",
        "0 & 1 & 0 \\\\\n",
        "0 & 0 & 1\n",
        "\\end{bmatrix}\n",
        "\\qquad\n",
        "E = \\begin{bmatrix}\n",
        "1 & 3 \\\\\n",
        "5 & 7\n",
        "\\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z69c-uPtnbIx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "A= (3,2)\n",
        "B= (1,3)\n",
        "C= (2,3)\n",
        "D= (3,3)\n",
        "E= (2,2)\n",
        "\n",
        "# some possible legal combos: AC, AE, BA, BD, CA, CD, DA"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lMOlCoM3ncGa",
        "colab_type": "text"
      },
      "source": [
        "## 2.2 Find the following products: CD, AE, and BA. What are the dimensions of the resulting matrices? How does that relate to the dimensions of their factor matrices?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zhKwiSItoE2F",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "matrixA = np.array([[1,2],[3,4],[5,6]])\n",
        "matrixB = np.array([2,4,6])\n",
        "matrixC = np.array([[9,6,3],[4,7,11]])\n",
        "matrixD = np.array([[1,0,0],[0,1,0],[0,0,1]])\n",
        "matrixE = np.array([[1,3],[5,7]])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZBB4wNWlWwOg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "c94c0700-bcf7-487b-e71d-3fc4629fca8d"
      },
      "source": [
        "print(np.matmul(matrixC,matrixD),'\\n\\n',np.matmul(matrixA,matrixE),'\\n\\n',np.matmul(matrixB,matrixA))\n"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 9  6  3]\n",
            " [ 4  7 11]] \n",
            "\n",
            " [[11 17]\n",
            " [23 37]\n",
            " [35 57]] \n",
            "\n",
            " [44 56]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p2jmaGLgoFPN",
        "colab_type": "text"
      },
      "source": [
        "## 2.3  Find $F^{T}$. How are the numbers along the main diagonal (top left to bottom right) of the original matrix and its transpose related? What are the dimensions of $F$? What are the dimensions of $F^{T}$?\n",
        "\n",
        "\\begin{align}\n",
        "F = \n",
        "\\begin{bmatrix}\n",
        "20 & 19 & 18 & 17 \\\\\n",
        "16 & 15 & 14 & 13 \\\\\n",
        "12 & 11 & 10 & 9 \\\\\n",
        "8 & 7 & 6 & 5 \\\\\n",
        "4 & 3 & 2 & 1\n",
        "\\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wl3ElwgLqaAn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "038fe1cb-9260-4d0b-9c93-41db9431538d"
      },
      "source": [
        "f = np.array([[20, 19,18,17], [16,15,14,13], \n",
        "              [12,11,10,9], [8,7,6,5], \n",
        "              [4,3,2,1]])\n",
        "\n",
        "print(f)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[20 19 18 17]\n",
            " [16 15 14 13]\n",
            " [12 11 10  9]\n",
            " [ 8  7  6  5]\n",
            " [ 4  3  2  1]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z-Q0FIT-XqS1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "5c4e88f0-4107-4dac-c4ba-4bd7c5fbec7a"
      },
      "source": [
        "import numpy \n",
        "\n",
        "print(numpy.transpose(f)) \n"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[20 16 12  8  4]\n",
            " [19 15 11  7  3]\n",
            " [18 14 10  6  2]\n",
            " [17 13  9  5  1]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "13ik2LEEZLHn",
        "colab_type": "text"
      },
      "source": [
        "# Part 3 - Square Matrices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sDBAPUwfp7f7",
        "colab_type": "text"
      },
      "source": [
        "## 3.1 Find $IG$ (be sure to show your work) 😃\n",
        "\n",
        "You don't have to do anything crazy complicated here to show your work, just create the G matrix as specified below, and a corresponding 2x2 Identity matrix and then multiply them together to show the result. You don't need to write LaTeX or anything like that (unless you want to).\n",
        "\n",
        "\\begin{align}\n",
        "G= \n",
        "\\begin{bmatrix}\n",
        "12 & 11 \\\\\n",
        "7 & 10 \n",
        "\\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZnqvZBOYqar3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "bfcccaed-5e6a-42c1-fdb4-6d8775866ed2"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "martix_g = np.array([[12,11],[7,10]])\n",
        "matrix_identity = np.array([[1,0],[0,1]])\n",
        "print(np.matmul(martix_g,matrix_identity))"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[12 11]\n",
            " [ 7 10]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DZ_0XTDQqpMT",
        "colab_type": "text"
      },
      "source": [
        "## 3.2 Find $|H|$ and then find $|J|$.\n",
        "\n",
        "\\begin{align}\n",
        "H= \n",
        "\\begin{bmatrix}\n",
        "12 & 11 \\\\\n",
        "7 & 10 \n",
        "\\end{bmatrix}\n",
        "\\qquad\n",
        "J= \n",
        "\\begin{bmatrix}\n",
        "0 & 1 & 2 \\\\\n",
        "7 & 10 & 4 \\\\\n",
        "3 & 2 & 0\n",
        "\\end{bmatrix}\n",
        "\\end{align}\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5QShhoXyrjDS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "1ede4cf5-3036-43ff-dd29-edee8abccd5f"
      },
      "source": [
        "\n",
        "matrixh = np.array([[12,11], [7,10]])\n",
        "matrixj = np.array([[0,1,2],[7,10,4],[3,2,0]])\n",
        "print(np.linalg.det(matrixh), '\\n\\n', np.linalg.det(matrixj))"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "43.000000000000014 \n",
            "\n",
            " -19.999999999999996\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2gZl1CFwrXSH",
        "colab_type": "text"
      },
      "source": [
        "## 3.3 Find $H^{-1}$ and then find $J^{-1}$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nyX6De2-rio1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "220a8962-f8e8-4715-ef0b-ebc80125eaf4"
      },
      "source": [
        "print(np.linalg.inv(matrixh), '\\n\\n', np.linalg.inv(matrixj))\n"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 0.23255814 -0.25581395]\n",
            " [-0.1627907   0.27906977]] \n",
            "\n",
            " [[ 0.4  -0.2   0.8 ]\n",
            " [-0.6   0.3  -0.7 ]\n",
            " [ 0.8  -0.15  0.35]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vvd4Pe86rjhW",
        "colab_type": "text"
      },
      "source": [
        "## 3.4 Find $HH^{-1}$ and then find $J^{-1}J$. Is $HH^{-1} == J^{-1}J$? Why or Why not?\n",
        "\n",
        "Please ignore Python rounding errors. If necessary, format your output so that it rounds to 5 significant digits (the fifth decimal place)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ljpjRBzEaaKj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#i'll need a little more time with this one. "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V0iTO4McYjtk",
        "colab_type": "text"
      },
      "source": [
        "# Stretch Goals: \n",
        "\n",
        "A reminder that these challenges are optional. If you finish your work quickly we welcome you to work on them. If there are other activities that you feel like will help your understanding of the above topics more, feel free to work on that. Topics from the Stretch Goals sections will never end up on Sprint Challenges. You don't have to do these in order, you don't have to do all of them. \n",
        "\n",
        "- Write a function that can calculate the dot product of any two vectors of equal length that are passed to it.\n",
        "- Write a function that can calculate the norm of any vector\n",
        "- Prove to yourself again that the vectors in 1.9 are orthogonal by graphing them. \n",
        "- Research how to plot a 3d graph with animations so that you can make the graph rotate (this will be easier in a local notebook than in google colab)\n",
        "- Create and plot a matrix on a 2d graph.\n",
        "- Create and plot a matrix on a 3d graph.\n",
        "- Plot two vectors that are not collinear on a 2d graph. Calculate the determinant of the 2x2 matrix that these vectors form. How does this determinant relate to the graphical interpretation of the vectors?\n",
        "\n"
      ]
    }
  ]
}
